// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// --------------------------------------

model User {
  id             Int      @id @default(autoincrement())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  name           String?
  email          String   @unique
  hashedPassword String?
  role           String   @default("USER")

  tokens   Token[]
  sessions Session[]
  buildings Building[]
}

model Session {
  id                 Int       @id @default(autoincrement())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  expiresAt          DateTime?
  handle             String    @unique
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?

  user   User? @relation(fields: [userId], references: [id])
  userId Int?
}

model Token {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  hashedToken String
  type        TokenType
  expiresAt   DateTime
  sentTo      String

  user   User @relation(fields: [userId], references: [id])
  userId Int

  @@unique([hashedToken, type])
}

 enum TokenType {
   RESET_PASSWORD
 }

 model Building {
   id        Int       @id @default(autoincrement())
   createdAt DateTime  @default(now())
   updatedAt DateTime  @updatedAt
   city      String
   street    String
   number    Int

   renters   Renter[]

   owner   User? @relation(fields: [ownerId], references: [id])
   ownerId Int?
 }

 model Renter {
   id         Int       @id @default(autoincrement())
   createdAt  DateTime  @default(now())
   updatedAt  DateTime  @updatedAt
   name       String
   email      String    @unique
   iban       String

   building   Building @relation(fields: [buildingId], references: [id])
   buildingId Int

   rentPayments PaidRent[]
   rentContract RentContract?
 }


model RentContract {
  id            Int       @id @default(autoincrement())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  amount        Float
  startDate     DateTime
  endDate       DateTime?
  parkingAmount Float?

  renter   Renter? @relation(fields: [renterId], references: [id])
  renterId Int? @unique
}

model PaidRent {
  id           Int         @id @default(autoincrement())
  amount       Float
  renter       Renter      @relation(fields: [renterId], references: [id])
  renterId     Int
  rentPeriod   RentPeriod  @relation(fields: [rentPeriodId], references: [id])
  rentPeriodId Int
}

model RentPeriod {
  id          Int       @id @default(autoincrement())
  year        Int
  month       Int
  paidRents   PaidRent[]

  @@unique([year, month])
}

